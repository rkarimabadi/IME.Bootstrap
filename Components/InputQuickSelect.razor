@using IME.Bootstrap.Common
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions
@using System.Diagnostics.CodeAnalysis
@inherits InputBase<string>

<CascadingValue Value="this">
    <div class="btn-group" role="group">
        @ChildContent
    </div>
</CascadingValue>


@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    private InputQuickSelectButton ActiveButton;
    private Dictionary<string,InputQuickSelectButton> Buttons = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if(Buttons.TryGetValue(CurrentValueAsString,out ActiveButton))
        {
            foreach (var item in Buttons.Values)
            {
                if(item != ActiveButton)
                    item.Deactive();

            }            
            ActiveButton.Active();
        }
        base.OnAfterRender(firstRender);
    }

    internal void AddButton(string Key, InputQuickSelectButton Value )
    {
        Buttons.Add(Key, Value);
    }
    internal void ActivateButton(InputQuickSelectButton button)
    {
        ValueChanged.InvokeAsync(button.Value);
    }

    protected override bool TryParseValueFromString(string value, out string result, out string validationErrorMessage)
    {
        if (Buttons.TryGetValue(CurrentValueAsString,out ActiveButton))
        {
            result = value;
            validationErrorMessage = null;
            return true;
        }
        else
        {
            result = null;
            validationErrorMessage = "Invalid option";
            return false;
        }
    }

}
